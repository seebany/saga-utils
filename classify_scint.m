function [combo1, combo2, combo3, combo1region, combo2region, combo3region]=classify_scint(year,doy,freq,month,day)

% This function is a modification of Vaishnavi_Scint.m as I (SDB) go through,
% check that the algorithm is correct, and comment the code prior to 
% manuscript submission.
% Created by V. Sreenivash, 2018
%
% Inputs are scalar year, scalar doy day of year [1, 366], 
% scalar freq = {1, 2}. Input month and day are immediately overwritten so
% unnecessary.
%
% Outputs are: 
%   combo1 -- both amplitude and phase scintillation events
%   combo2 -- amplitude only scintillation events
%   combo3 -- phase only scintillation events
% where each combo* is a matrix of data about each event:
% [year doy freq prn SP_hr(SProw(l),2) SP_hr(SProw(l),3) SP_hr(SProw(l),4) SP_hr(SProw(l),5)]
%   combo1region -- [combo1, region]
%   combo2region -- [combo2, region]
%   combo3region -- [combo3, region]
% where region is an array of single char 'N' (no PFISR data), 'I'
% (inconclusive), 'E' (E layer), 'F' (F layer).
%
%
% S. Datta-Barua
% 15 Nov 2018
% 20 Feb 2019 Further documenting, as re-run will be needed for paper
% revisions.

% Load the Matlab files generated by running Yang's detection routine,
% which provides, for a given year, doy, frequency, and amplitude or phase,
% a list of: PRNs found to have been scintillating and the time intervals.
load(['L',num2str(freq),'_S4_',num2str(year,'%04i'),'_',num2str(doy,'%03i'),'.mat']); % Change the file name according to how the amplitude .mat file is saved using Yang's script
% Reassign the variable name so it doesn't get overwritten.
% The array S4_hr contains [prn start_hh start_mm end_hh end_mm ...]
S4_hr=TSP_hrv0;
% Repeat load and reassign for phase scintillation.
load(['L',num2str(freq),'_SP_',num2str(year,'%04i'),'_',num2str(doy,'%03i'),'.mat']); % Change the file name according to how the phase .mat file is saved using Yang's script
SP_hr=TSP_hrv0;

% Lists of scintillating PRNs are the first column of the matrices S4_hr
% and SP_hr.
S4prn=[];
SPprn=[];

% Based on the fact that .mat files always get loaded, it looks like they
% always exist but may just contain an empty array.
if ~isempty(S4_hr)
    S4prn=S4_hr(:,1);
end
if ~isempty(SP_hr)
    SPprn=SP_hr(:,1);
end

% Compute the year, month, day from year and doy.  This means the input
% month and day get overwritten.
RINEX.year=year;
RINEX.day=doy;
[gps,abs,utc]=convert_rinex(RINEX,0); %leap =0 as 2014 and 2015 are not leap years
month=utc.mon;                        %leap = 1 for leap years 
day=utc.day;

%Classfying events 
%First classification : Both (Phase and Amplitude)
%____________________________SP and S4_____________________________________
S4SP=[];

% If both sets Sa *and* Sp exist.
if (~isempty(SP_hr)&&~isempty(S4_hr))
    % Set B is the intersection of prns.
    S4SPprnlist=intersect(S4prn,SPprn);
    
    % Go through each prn in set B.
    for i=1:length(S4SPprnlist)
        % Multiple events for that prn may be listed.  Find all event rows.
        S4row=find(S4prn==S4SPprnlist(i));
        SProw=find(SPprn==S4SPprnlist(i));
        % Loop through each S4 event row.
        for j=1:length(S4row)
            
            S4startdatenum=datenum(year,month,day,S4_hr(S4row(j),2),S4_hr(S4row(j),3),0);
            S4enddatenum=datenum(year,month,day,S4_hr(S4row(j),4),S4_hr(S4row(j),5),0);
            
            % Compare each S4 event row's times to each SP event row's
            % times.
            for k=1:length(SProw)
                SPstartdatenum=datenum(year,month,day,SP_hr(SProw(k),2),SP_hr(SProw(k),3),0);
                SPenddatenum=datenum(year,month,day,SP_hr(SProw(k),4),SP_hr(SProw(k),5),0);
                %Common time interval between SP and S4 for same prn
                maximum_startdatenum=max(S4startdatenum,SPstartdatenum);
                minimum_enddatenum=min(S4enddatenum,SPenddatenum);
                
                if(maximum_startdatenum<minimum_enddatenum)
                    common_startdatenum=maximum_startdatenum;
                    common_enddatenum=minimum_enddatenum;
                    common_startdatevec=datevec(common_startdatenum);
                    common_enddatevec=datevec(common_enddatenum);
                    S4SP=[S4SP;[year doy freq S4SPprnlist(i) common_startdatevec(4) common_startdatevec(5) common_enddatevec(4) common_enddatevec(5)]];
                else
                    disp('No time intervals common to both S4 and SP acintillation');
                end
            end
        end
    end
end

%Second classification : Only Amplitude
%______________________ only S4 ______________________________________________
S4=[];
if isempty(S4_hr)
    disp(['No Amplitude scintillation on the day',num2str(doy,'%03i'),' of the year',num2str(year,'%04i')]);
else
    
    % Oa = setdiff(A, B) outputs the elements of A that are not in B.  So these
    % are prns that are exclusively in the S4 list.  They will be
    % amplitude-only scintillations, either because only an S4 list exists
    % or because both S4 and SP lists exist but these are only in the S4
    % list but not the SP list.
    onlyS4prnlist=setdiff(S4prn,SPprn);
    
    % Go through each prn in set Oa.
    for i=1:length(onlyS4prnlist)
        row=find(S4_hr(:,1)==onlyS4prnlist(i));
        % Store every event for the prns in Oa.
        for j=1:length(row)
            S4=[S4;[year doy freq S4_hr(row(j),1) S4_hr(row(j),2) S4_hr(row(j),3) S4_hr(row(j),4) S4_hr(row(j),5)]]
        end
    end
    
    % This part goes through the case where both Sa and Sp exist.
    if (~isempty(SP_hr)&&~isempty(S4_hr))
        % The set B was previously generated so check through those again.
        % Go through each prn in set B.
        for k=1:length(S4SPprnlist)
            % Multiple events for that prn may be listed.  Find all event rows.
            S4row=find(S4prn==S4SPprnlist(k));
            SProw=find(SPprn==S4SPprnlist(k));
            % Loop through each S4 event row.
            for l=1:length(S4row)
                % Begin a counter.
                n=0
                S4startdatenum=datenum(year,month,day,S4_hr(S4row(l),2),S4_hr(S4row(l),3),0);
                S4enddatenum=datenum(year,month,day,S4_hr(S4row(l),4),S4_hr(S4row(l),5),0);
                
                % Compare each S4 event row's times to each SP event row's
                % times.
                for m=1:length(SProw)
                    SPstartdatenum=datenum(year,month,day,SP_hr(SProw(m),2),SP_hr(SProw(m),3),0);
                    SPenddatenum=datenum(year,month,day,SP_hr(SProw(m),4),SP_hr(SProw(m),5),0);
                    %Finding out disjoint time interval between SP and S4 for same prn
                    maximum_startdatenum=max(S4startdatenum,SPstartdatenum);
                    minimum_enddatenum=min(S4enddatenum,SPenddatenum);
                    
                    % If a common time interval was found (again),
                    % increment the counter.  If a common time was found,
                    % the time interval of S4 that doesn't intersect the
                    % common time interval is discarded (even though it
                    % could be counted).
                    if(maximum_startdatenum<minimum_enddatenum)
                        n=n+1;
                    end
                end
                
                % If the counter is still at 0, there were no common times
                % found, so this S4 event may be included in the amplitude-
                % only list.
                if (n==0)
                    S4=[S4;[year doy freq S4SPprnlist(k) S4_hr(S4row(l),2) S4_hr(S4row(l),3) S4_hr(S4row(l),4) S4_hr(S4row(l),5)]];
                end
                
            end
        end
    end
end

% This is comparable to the second classification (only-amplitude) step.
%Third classification : Only Phase
%______________________ only Sp ____________________________________________
SP=[];
if isempty(SP_hr)
    disp(['No Phase scintillation on the day',num2str(doy,'%03i'),' of the year',num2str(year,'%04i')]);
else
    
    % Op = setdiff(A, B) outputs the elements of A that are not in B.  So these
    % are prns that are exclusively in the SP list.  They will be
    % phase-only scintillations, either because only an SP list exists
    % or because both S4 and SP lists exist but these are only in the SP
    % list but not the S4 list.
    onlySPprnlist=setdiff(SPprn,S4prn);
    
    % Go through each prn in set Ob.
    for i=1:length(onlySPprnlist)
        % Store every event for the prns in Ob.
        row=find(SP_hr(:,1)==onlySPprnlist(i));
        for j=1:length(row)
            SP=[SP;[year doy freq SP_hr(row(j),1) SP_hr(row(j),2) SP_hr(row(j),3) SP_hr(row(j),4) SP_hr(row(j),5)]]
        end
    end
    
    % This part goes through the case where both Sa and Sp exist.
    if (~isempty(SP_hr)&&~isempty(S4_hr))
        % The set B was previously generated so check through those again.
        % Go through each prn in set B.
        for k=1:length(S4SPprnlist)
            % Multiple events for that prn may be listed.  Find all event rows.
            S4row=find(S4prn==S4SPprnlist(k));
            SProw=find(SPprn==S4SPprnlist(k));
            % Loop through each SP event row.
            for l=1:length(SProw)
                % Begin a counter.
                n=0
                SPstartdatenum=datenum(year,month,day,SP_hr(SProw(l),2),SP_hr(SProw(l),3),0);
                SPenddatenum=datenum(year,month,day,SP_hr(SProw(l),4),SP_hr(SProw(l),5),0);
                % Compare each SP event row's times to each S4 event row's
                % times.
                for m=1:length(S4row)
                    S4startdatenum=datenum(year,month,day,S4_hr(S4row(m),2),S4_hr(S4row(m),3),0);
                    S4enddatenum=datenum(year,month,day,S4_hr(S4row(m),4),S4_hr(S4row(m),5),0);
                    %Finding out disjoint time interval between SP and S4 for same prn
                    maximum_startdatenum=max(S4startdatenum,SPstartdatenum);
                    minimum_enddatenum=min(S4enddatenum,SPenddatenum);

                    % If a common time interval was found (again),
                    % increment the counter.  If a common time was found,
                    % the time interval of SP that doesn't intersect the
                    % common time interval is discarded (even though it
                    % could be counted).
                    if(maximum_startdatenum<minimum_enddatenum)
                        n=n+1;
                    end
                end
                % If the counter is still at 0, there were no common times
                % found, so this SP event may be included in the amplitude-
                % only list.
                if (n==0)
                    SP=[SP;[year doy freq S4SPprnlist(k) SP_hr(SProw(l),2) SP_hr(SProw(l),3) SP_hr(SProw(l),4) SP_hr(SProw(l),5)]];
                end
            end
        end
    end
    
    
end

  combo1=S4SP;
  combo2=S4;
  combo3=SP;

%   %--------------------------------------------------------------------------------------------------------------
%   %Extracting the PFISR data for the given day
%   M=Madrigal_File_for_a_day(year,month,day);
%   %-------------------------------------------------------------------------------------------------------------------
  
 %Identifying Ionospheric Region for only phase events
 SPregion=[];
 for i=1:length(SP)
     % Start and end times are decimal UT hour.
     starttime=SP(i,5)+(SP(i,6)/60);
     endtime=SP(i,7)+(SP(i,8)/60);
    region = attribute_scint(year,month,day,starttime,endtime);
    SPregion=[SPregion;region];
     
 end
 S4region=[];
 %Identifying Ionospheric Region for only amplitude events
 for i=1:length(S4)
     starttime=S4(i,5)+(S4(i,6)/60);
     endtime=S4(i,7)+(S4(i,8)/60);
     region = attribute_scint(year,month,day,starttime,endtime);
     S4region=[S4region;region];
     
 end
 S4SPregion=[];
 %Identifying Ionospheric Region for both-amplitude and phase events
 for i=1:length(S4SP)
     starttime=S4SP(i,5)+(S4SP(i,6)/60);
     endtime=S4SP(i,7)+(S4SP(i,8)/60);
     region = attribute_scint(year,month,day,starttime,endtime);
     S4SPregion=[S4SPregion;region];
     
 end
 combo1region=S4SPregion;
 combo2region=S4region;
 combo3region=SPregion;
end
  